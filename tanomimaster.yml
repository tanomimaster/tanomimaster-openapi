openapi: 3.0.0
info:
  version: 0.0.11
  title: REST API for makers
  description: Main file of Maker REST API.
  license:
    name: All Rights Reserved
  contact:
    name: Yuki Matsukura
    url: 'https://tanomimaster.freshdesk.com/support/tickets/new'
    email: support@tanomimaster.freshdesk.com
servers:
  - url: 'https://development.tanomimaster.com/api/v1'
    description: Development
  - url: 'https://staging.tanomimaster.com/api/v1'
    description: Staging
  - url: 'https://tanomimaster.com/api/v1'
    description: Production
paths:
  /retail/products:
    get:
      summary: List products
      operationId: listProducts
      tags:
        - products
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
        - schema:
            type: string
          in: query
          name: maker_code
          description: ''
        - schema:
            type: string
          in: query
          name: product_code
      responses:
        '200':
          description: A paged array of products
          headers:
            X-Total-Pages:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Next-Page:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: list OrderProduct entities
      security:
        - API Key: []
    parameters: []
  '/retail/products/{product_id}':
    get:
      summary: show Product
      operationId: showProductById
      tags:
        - products
      parameters:
        - name: product_id
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - API Key: []
      description: show product by id
    parameters:
      - schema:
          type: integer
          default: '1'
          maximum: 0
          minimum: 1
        name: product_id
        in: path
        description: 商品ID
        required: true
  /retail/orders:
    parameters: []
    get:
      summary: list orders
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - API Key: []
      operationId: listOrders
      description: list orders
    post:
      summary: post order
      operationId: createOrder
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: {}
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Create an order
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderForCreate'
            examples: {}
      tags:
        - Orders
  '/retail/orders/{order_code}':
    parameters:
      - schema:
          type: string
        name: order_code
        in: path
        required: true
    get:
      summary: show an order
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples: {}
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - API Key: []
      operationId: showOrderById
      description: show order by Code
  '/retail/orders/{order_code}/order_products':
    parameters:
      - schema:
          type: string
        name: order_code
        in: path
        required: true
    get:
      summary: listOrderProducts
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderProduct'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-orders-order_code-products
      description: list OrderProduct entities
      security:
        - API Key: []
    post:
      summary: postOrderProduct
      operationId: post-retail-orders-order_code-order_products
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: post order_product
      tags:
        - Orders
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                maker_code:
                  type: string
                code:
                  type: string
                number_of_items:
                  type: integer
                branch_number:
                  type: integer
                shipping_postcode:
                  type: string
                shipping_preferecture_code:
                  type: string
                shipping_city:
                  type: string
                shipping_street_address:
                  type: string
                shipping_building:
                  type: string
                shipping_office_name:
                  type: string
                shipping_tel:
                  type: string
                gas_type_id:
                  description: ガス種を選択する商品の場合、必須項目
                  oneOf:
                    - type: integer
                    - type: 'null'
                memo:
                  type: string
              required:
                - maker_code
                - code
                - number_of_items
  '/retail/orders/{order_code}/order_products/{order_product_id}':
    parameters:
      - schema:
          type: string
        name: order_code
        in: path
        required: true
      - schema:
          type: string
        name: order_product_id
        in: path
        required: true
    get:
      summary: showOrderProduct
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-orders-order_code-products-order_product_id
      description: show OrderProduct entities corresponding to the id
      security:
        - API Key: []
    patch:
      summary: ''
      operationId: patch-retail-orders-order_code-order_products-order_product_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                リクエストパラメータ不正:
                  value:
                    code: '400'
                    messages:
                      - 注文ステータスの値が不正です
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 仕入納品または枝番納品キャンセル、枝番注文キャンセルを行う
      security:
        - API Key: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                order_status:
                  type: string
                  enum:
                    - delivered
                    - undelivered
                    - cancelled
            examples:
              仕入納品:
                value:
                  order_status: delivered
              枝番納品キャンセル:
                value:
                  order_status: undelivered
              枝番注文キャンセル:
                value:
                  order_status: cancelled
        description: ''
      tags:
        - Orders
  /makers:
    get:
      summary: listMakers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Maker'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: listMakers
      description: list Maker entities
      security:
        - API Key: []
      tags:
        - Makers
    parameters: []
  '/makers/{maker_id}':
    parameters:
      - schema:
          type: integer
        name: maker_id
        in: path
        required: true
    get:
      summary: showMaker
      tags:
        - Makers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maker'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: showMakerById
      parameters: []
      description: Show Maker entity
      security:
        - API Key: []
  /retail/products/check_code:
    post:
      summary: checkProductExistence
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  type: object
                  properties:
                    maker_code:
                      type: string
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          code:
                            type: string
                          maker_price_for_retail_amount:
                            description: 商品が存在する場合、その価格を設定する. 存在しない場合はnull
                            oneOf:
                              - type: integer
                              - type: 'null'
                          maker_price_for_retail_currency:
                            oneOf:
                              - type: string
                              - type: 'null'
                          is_available:
                            type: boolean
                            description: The product is on sale or not
                        required:
                          - code
                  required:
                    - maker_code
                    - products
              examples:
                normal response. returns availability and price.:
                  value:
                    - maker_code: rinnai
                      products:
                        - code: 12-10002
                          maker_price_for_retail_amount: 10000
                          maker_price_for_retail_currency: JPY
                          is_available: true
                        - code: 12-10003
                          maker_price_for_retail_amount: null
                          maker_price_for_retail_currency: null
                          is_available: true
                    - maker_code: paloma
                      products:
                        - code: '10002'
                          maker_price_for_retail_amount: 10000
                          maker_price_for_retail_currency: JPY
                          is_available: false
                        - code: '10003'
                          maker_price_for_retail_amount: null
                          maker_price_for_retail_currency: null
                          is_available: false
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
              examples:
                リクエストパラメータ不正:
                  value:
                    code: '400'
                    messages:
                      - 'メーカーが存在しません(<MakerName>)'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-products-check
      description: Check the passed ids are existed in this system.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                type: object
                properties:
                  maker_code:
                    type: string
                  product_code:
                    type: array
                    items:
                      type: string
                required:
                  - maker_code
                  - product_code
            examples:
              example:
                value:
                  - maker_code: rinnai
                    product_code:
                      - 12-10001
                      - 12-10002
                  - maker_code: noritz
                    product_code:
                      - '190001'
                      - '190002'
        description: ''
      security:
        - API Key: []
      tags:
        - products
    parameters: []
  /categories:
    get:
      summary: listCategories
      tags:
        - Common
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            multipart/form-data:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - API Key: []
      operationId: listCategories
      description: list categories
    parameters: []
  '/categories/{category_id}':
    parameters:
      - schema:
          type: integer
        name: category_id
        in: path
        required: true
    get:
      summary: show the category
      tags:
        - Common
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-category-category_id
      description: show the category
  '/retail/retail_branches/{retail_branch_id}':
    get:
      summary: showRetailBranch
      tags:
        - RetailBranches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailBranch'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: showRetailBranchById
      parameters: []
      description: Show RetailBranch entity
      security:
        - API Key: []
    parameters:
      - schema:
          type: integer
        name: retail_branch_id
        in: path
        required: true
  /retail/retail_branches:
    get:
      summary: listRetailBranches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailBranch'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: listRetailBranches
      description: list listRetailBranch entities
      security:
        - API Key: []
      tags:
        - RetailBranches
    parameters: []
  /retail/retail_sales_offices:
    get:
      summary: listRetailSalesOffices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailSalesOffice'
          headers:
            X-Next-Page:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Prev-Page:
              schema:
                type: integer
            X-Total:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: listRetailSalesOffices
      description: list listRetailSalesOffice entities
      security:
        - API Key: []
      tags:
        - RetailSalesOffices
    parameters: []
  '/retail/retail_sales_offices/{retail_sales_office_id}':
    get:
      summary: showRetailSalesOffice
      tags:
        - RetailSalesOffices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetailSalesOffice'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: showRetailSalesOfficeById
      parameters: []
      description: Show RetailSalesOffice entity
      security:
        - API Key: []
    parameters:
      - schema:
          type: integer
        name: retail_sales_office_id
        in: path
        required: true
  /retail/retail_users:
    get:
      summary: listRetailUsers
      tags:
        - RetailUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetailUser'
      operationId: get-retail-retail_users
      description: list listRetailUser entities
      security:
        - API Key: []
  /retail/orders/batch:
    post:
      summary: Bulk create orders
      operationId: post-retai-orders-batch
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Order'
                    - $ref: '#/components/schemas/Errors'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: bulk create orders
      security:
        - API Key: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/OrderForCreate'
      tags:
        - Orders
    parameters: []
components:
  schemas:
    Product:
      title: Product
      type: object
      xml:
        name: Product
      x-tags:
        - Products
      description: A single product.
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
        updated_at:
          type: string
          format: date-time
        disabled_at:
          type: string
          format: date-time
        estimated_delivery_duration:
          type: integer
        use_gas_type_master:
          type: boolean
        maker_id:
          type: integer
        status:
          type: string
          description: product status in the store
          enum:
            - available
            - pending
            - sold
        internal_code:
          type: string
        name:
          type: string
          example: doggie
        category_id:
          type: integer
      required:
        - id
        - name
        - category_id
    Maker:
      title: Maker
      type: object
      description: A maker
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - code
        - name
    Category:
      title: Category
      type: object
      x-examples:
        example-1: {}
      x-tags:
        - Products
      description: ''
      properties:
        id:
          type: integer
          format: int64
        ancestry_depth:
          type: integer
        ancestry:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        name:
          type: string
        disabled_at:
          type: string
          format: date-time
      required:
        - id
        - name
    Error:
      title: Error
      type: object
      description: A standard error object.
      x-tags:
        - Common
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      x-examples:
        認証失敗:
          code: '401'
          message: 認証に失敗しました
        実行権限がない(e.g. メーカーが本APIを実行した場合など):
          code: '403'
          message: APIを実行する権限がありません
        注文番号重複エラー:
          code: '409'
          message: 注文番号190123456789はすでに存在しています
        注文が見つからない:
          code: '404'
          message: 注文が見つかりませんでした
        サーバエラー:
          code: '500'
          message: 'APIサーバーでエラーが発生しました. <アプリケーションのエラーメッセージ> <発生時刻> <リクエストID>'
    OrderProduct:
      title: OrderProduct
      type: object
      x-tags:
        - Orders
      description: ''
      properties:
        id:
          type: string
        orders_maker_id:
          type: string
        product_id:
          type: integer
        gas_type_id:
          description: ガス種を選択する商品の場合、必須項目
          oneOf:
            - type: integer
            - type: 'null'
        name:
          type: string
        code:
          type: string
        branch_number:
          type: integer
        internal_code:
          type: string
        price_amount:
          type: integer
        price_currency:
          type: string
        maker_price_for_retail_amount:
          type: integer
        maker_price_for_retail_currency:
          type: string
        subtotal_excluding_tax:
          type: integer
        estimated_delivery_duration:
          type: integer
        shipping_status:
          type: string
          enum:
            - undelivered
            - delivered
        delivery_date:
          type: string
          format: date
        number_of_items:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        cancelled_at:
          type: string
          nullable: true
          description: 仕入納品APIでキャンセルした場合、キャンセル日時を設定
          format: date-time
      required:
        - id
        - orders_maker_id
        - product_id
        - name
        - code
    Order:
      title: Order
      type: object
      description: ''
      x-tags:
        - Orders
      x-examples:
        example-1: {}
      properties:
        id:
          type: string
        retail_id:
          type: integer
        retail_sales_office_id:
          type: integer
        retail_user_id:
          type: integer
        code:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        desired_delivery_date:
          type: string
          format: date
        ordered_at:
          type: string
          format: date-time
      required:
        - id
        - retail_id
        - retail_sales_office_id
        - retail_user_id
        - code
    RetailBranch:
      title: RetailBranch
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - code
        - name
    RetailSalesOffice:
      title: RetailSalesOffice
      type: object
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        postcode:
          type: string
        prefecture:
          type: string
        city:
          type: string
        street_address:
          type: string
        tel:
          type: string
        fax:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    RetailUser:
      title: RetailUser
      type: object
      description: ''
      properties:
        id:
          type: integer
        code:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - admin
            - clerk
            - sales
        last_name:
          type: string
        first_name:
          type: string
        last_name_kane:
          type: string
        first_name_kana:
          type: string
        tel:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Retail:
      title: Retail
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - code
    OrderMaker:
      title: OrderMaker
      type: object
      properties:
        id:
          type: string
        maker_id:
          type: integer
        maker_user_id:
          type: integer
        maker_sales_office_id:
          type: integer
        code:
          type: string
        status:
          type: string
          enum:
            - ordered
            - downloaded
            - answered
            - shipped
            - delivered
            - canceled
        estimated_delivery_date:
          type: string
        official_estimated_delivery_date:
          type: string
          format: date
        answered_at:
          type: string
          format: date-time
        delivery_date:
          type: string
        shipping_postcode:
          type: string
        shipping_prefecture_code:
          type: string
        shipping_city:
          type: string
        shipping_street_address:
          type: string
        shipping_building:
          type: string
        shipping_office_name:
          type: string
        shipping_tel:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        retail_sales_office_code:
          type: string
        desired_delivery_date:
          type: string
          format: date
          description: 希望納期. 指定しない場合、タノミマスター算出する納期目安を設定
        retail_user_code:
          type: string
      required:
        - id
        - maker_id
    Errors:
      title: Errors
      type: object
      x-examples: {}
      properties:
        code:
          type: string
        messages:
          type: array
          items:
            type: string
      required:
        - code
        - messages
      description: バリデーションエラーなど複数エラーメッセージがある場合
    OrderForCreate:
      title: OrderForCreate
      type: object
      description: ''
      x-tags:
        - Orders
      properties:
        code:
          type: string
          description: ''
        makers:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              maker_code:
                type: string
              products:
                type: array
                minItems: 1
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    branch_number:
                      type: integer
                      description: 明細枝番。指定しない場合、タノミマスターで自動発番
                    number_of_items:
                      type: integer
                      minimum: 1
                    gas_type_id:
                      description: ガス種を選択する商品の場合、必須項目
                      oneOf:
                        - type: integer
                        - type: 'null'
                    memo:
                      type: string
                  required:
                    - code
                    - number_of_items
              code:
                type: string
                description: order code per maker
              retail_sales_office_code:
                type: string
              retail_user_code:
                type: string
              desired_delivery_date:
                type: string
                format: date
                description: 希望納期. 指定しない場合、タノミマスター算出する納期目安を設定
              shipping_postcode:
                type: string
              shipping_city:
                type: string
              shipping_street_address:
                type: string
              shipping_building:
                type: string
              shipping_office_name:
                type: string
              shipping_tel:
                type: string
            required:
              - maker_code
              - retail_user_code
        ordered_at:
          type: string
          format: date-time
          description: 注文日時。時刻文字列にTZ指定がない場合、JSTとして処理する
      x-examples:
        example:
          code: '2000000014'
          ordered_at: '2020/03/03 12:43:36'
          makers:
            - maker_code: '1'
              shipping_postcode: null
              shipping_city: null
              shipping_street_address: 埼玉県さいたま市桜区上大久保８８８－５
              shipping_building: null
              shipping_office_name: 日本瓦斯株式会社　浦和営業所
              shipping_tel: 048-854-1910
              retail_user_code: '01210'
              retail_sales_office_code: '00022'
              desired_delivery_date: 2020/03/10
              products:
                - code: 60S W N300
                  branch_number: 1
                  number_of_items: 3
                  gas_type_id: null
                  memo: 備考欄
  securitySchemes:
    API Key:
      type: http
      scheme: Bearer
      description: API key acquired on retail management page by admin.
